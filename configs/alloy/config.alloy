livedebugging {
  enabled = true
}

discovery.docker "containers" {
  host = "unix:///var/run/docker.sock"
}

// ###############################
// #### Metrics Configuration ####
// ###############################
prometheus.exporter.cadvisor "local" {
  docker_host = "unix:///var/run/docker.sock"

  storage_duration = "5m"
}

prometheus.scrape "scrape_cadvisor" {
  targets    = prometheus.exporter.cadvisor.local.targets
  forward_to = [ prometheus.remote_write.local.receiver ]

  scrape_interval = "15s"
}

prometheus.scrape "scrape_containers" {
  targets    = discovery.docker.containers.targets
  forward_to = [ prometheus.remote_write.local.receiver ]

  scrape_interval = "15s"
}

prometheus.remote_write "local" {
  endpoint {
    url = "http://prometheus:9090/api/v1/write"
  }
}

// ###############################
// #### Logging Configuration ####
// ###############################

loki.source.docker "containers" {
  host       = "unix:///var/run/docker.sock"
  targets    = discovery.docker.containers.targets
  relabel_rules = discovery.relabel.logs_integrations_docker.rules
  forward_to = [loki.write.local.receiver]
}

// Define a relabeling rule to create a service name from the container name.
discovery.relabel "logs_integrations_docker" {
  targets = []

  rule {
    source_labels = ["__meta_docker_container_name"]
    regex        = "/(.*)"
    target_label = "service_name"
  }
}

loki.write "local" {
  endpoint {
    url = "http://loki:3100/loki/api/v1/push"
  }
}

// ###############################
// ##### Traces Configuration ####
// ###############################
otelcol.receiver.otlp "default" {
  http {}
  grpc {}

  output {
    traces = [otelcol.processor.batch.default.input]
  }
}

otelcol.processor.batch "default" {
  output {
    traces = [otelcol.exporter.otlphttp.default.input]
  }
}

otelcol.exporter.otlphttp "default" {
  client {
    endpoint = "http://tempo:4318"
    tls {
      insecure             = true
      insecure_skip_verify = true
    }
  }
}